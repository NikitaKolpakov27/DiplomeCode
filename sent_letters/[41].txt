=========ЗАГОЛОВКИ ПИСЬМА==========
FROM: ('=?UTF-8?B?0L3QuNC60LjRgtCwINC60L7Qu9C/0LDQutC+0LI=?=', 'nik.kolpakov@inbox.ru')
TO: =?UTF-8?B?bV9kcnl1Y2hlbmtv?= <m_dryuchenko@mail.ru>
DATE: Mon, 08 Jun 2020 11:07:48 +0300
SUBJECT: =?UTF-8?B?TGFiIDQgdmFyIDQudHh0LCBMYWIgNiB2YXIgNi50eHQsIExhYiA3LnR4dA==?=
MESSAGE_ID: <1591603668.805832827@f483.i.mail.ru>


=====ТЕЛО ПИСЬМА==========='NoneType' object has no attribute 'decode'
=====ТЕЛО ПИСЬМА==========='NoneType' object has no attribute 'decode'#include <iostream>
#include <string>
#include <utility>
#include <fstream>
#include <sstream>
#include <vector>
using namespace std;


struct Song {
    string musician;
    string musName;
    size_t yearSong;
    string nameOfPerf;
};

struct MusicShop {
    vector<Song> song;
};

vector<Song> song;
void addSong(string musician_temp, string musName_temp, string perform, size_t year) {
    song[year].musician = move(musician_temp);
    song[year].musName = move(musName_temp);
    song[year].nameOfPerf = move(perform);
    song[year].yearSong = year;
}

void getSong(size_t year) {
        if (year < song.size() && song[year].yearSong == year) {
            cout << "Музыкант\\группа: " << song[year].musician + " " << "; песня - " << song[year].musName + " "
                 << "; вид исполнения - " << song[year].nameOfPerf << " " << "; дата релиза - " << song[year].yearSong;
        }
}

int main() {

    system("chcp 65001");

    ifstream f1;
    f1.open("f1.txt");
    if (!f1.is_open()) {
        cout << "Файл не смог открыться" << endl;
    } else {
        cout << "Файл был открыт" << endl;
        string str;
        while (getline(f1, str)) {
            getline(f1, str);
            string musicin, nameMuz, perform;
            size_t year;
            istringstream isstr(str);
            isstr >> musicin >> nameMuz >> perform >> year;
            addSong(musicin, nameMuz, perform, year);
        }
    }

    f1.close();


    ofstream f2;
    f2.open("f2.txt");
    if (!f2.is_open()) {
        cout << "Файл не смог открыться" << endl;
    } else {
        cout << "Файл был открыт" << endl;
        cout << "Введите данные:" << endl;
        string data;
        cin >> data;
        f2 << data;
    }
    f2.close();


    cout << endl << "Введите дату релиза:" << endl;
    size_t year;
    cin >> year;
    getSong(year);

}




=====ТЕЛО ПИСЬМА==========='NoneType' object has no attribute 'decode'#include <iostream>
#include <string>
#include <utility>
#include <fstream>
#include <sstream>
#include <vector>
using namespace std;


struct Song {
    string musician;
    string musName;
    size_t yearSong;
    string nameOfPerf;
};

struct MusicShop {
    vector<Song> song;
};

vector<Song> song;
void addSong(string musician_temp, string musName_temp, string perform, size_t year) {
    song[year].musician = move(musician_temp);
    song[year].musName = move(musName_temp);
    song[year].nameOfPerf = move(perform);
    song[year].yearSong = year;
}

void getSong(size_t year) {
        if (year < song.size() && song[year].yearSong == year) {
            cout << "Музыкант\\группа: " << song[year].musician + " " << "; песня - " << song[year].musName + " "
                 << "; вид исполнения - " << song[year].nameOfPerf << " " << "; дата релиза - " << song[year].yearSong;
        }
}

int main() {

    system("chcp 65001");

    ifstream f1;
    f1.open("f1.txt");
    if (!f1.is_open()) {
        cout << "Файл не смог открыться" << endl;
    } else {
        cout << "Файл был открыт" << endl;
        string str;
        while (getline(f1, str)) {
            getline(f1, str);
            string musicin, nameMuz, perform;
            size_t year;
            istringstream isstr(str);
            isstr >> musicin >> nameMuz >> perform >> year;
            addSong(musicin, nameMuz, perform, year);
        }
    }

    f1.close();


    ofstream f2;
    f2.open("f2.txt");
    if (!f2.is_open()) {
        cout << "Файл не смог открыться" << endl;
    } else {
        cout << "Файл был открыт" << endl;
        cout << "Введите данные:" << endl;
        string data;
        cin >> data;
        f2 << data;
    }
    f2.close();


    cout << endl << "Введите дату релиза:" << endl;
    size_t year;
    cin >> year;
    getSong(year);

}



#include <iostream>
#include <vector>
#include <iterator>

using namespace std;

class Set {
private:
    vector <int> my_list;
public:

    Set() = default;

    ~Set() = default;

    void add(int a) {
        (my_list).push_back(a);

	for (int i = 0; i < my_list.size(); i++) {
            for (int j = i + 1; j < my_list.size(); j++) {
                if (my_list.at(i) > my_list.at(j)) {
                    auto temp = my_list.at(i);
                    my_list.at(i) = my_list.at(j);
                    my_list.at(j) = temp;
                }
            }
        }
    }

    void removeElem(int index) {
        my_list.erase(my_list.begin() + index);
    }

    void print() {
        vector <int> :: iterator it;

        for (it = my_list.begin(); it < my_list.end(); it++) {
            cout << *it << " ";
        }
    }

    friend Set operator+(Set &s1, Set &s2);
};

Set operator+(Set &s1, Set &s2) {
    Set temp;
    Set temp_new;
    copy(s1.my_list.begin(), s1.my_list.end(), back_inserter(temp_new.my_list));
    copy(s2.my_list.begin(), s2.my_list.end(), back_inserter(temp_new.my_list));
    copy(temp_new.my_list.begin(), temp_new.my_list.end(), back_inserter(temp.my_list));

    for (int i = 0; i < temp_new.my_list.size(); i++) {
        for (int j = i + 1; j < temp_new.my_list.size(); j++) {
            if (temp_new.my_list.at(i) == temp_new.my_list.at(j)) {
                temp_new.removeElem(j);
            }
        }
    }

    for (int i = 0; i < temp_new.my_list.size(); i++) {
        for (int j = i + 1; j < temp_new.my_list.size(); j++) {
            if (temp_new.my_list.at(i) > temp_new.my_list.at(j)) {
                auto temp0 = temp_new.my_list.at(i);
                temp_new.my_list.at(i) = temp_new.my_list.at(j);
                temp_new.my_list.at(j) = temp0;
            }
        }
    }

    return temp_new;
}

int main() {
    system("chcp 65001");

    Set a;
    a.add(9);
    a.add(8);
    a.add(19);

    Set b;
    b.add(4);
    b.add(7);
    b.add(10);


    cout << "Множество A: ";
    a.print();
    cout << "\n";

    cout << "Множество B: ";
    b.print();
    cout << "\n";

    Set c = a + b;
    cout << "Множество C: ";
    c.print();

    cout << "\n";


}
=====ТЕЛО ПИСЬМА==========='NoneType' object has no attribute 'decode'#include <iostream>
#include <string>
#include <utility>
#include <fstream>
#include <sstream>
#include <vector>
using namespace std;


struct Song {
    string musician;
    string musName;
    size_t yearSong;
    string nameOfPerf;
};

struct MusicShop {
    vector<Song> song;
};

vector<Song> song;
void addSong(string musician_temp, string musName_temp, string perform, size_t year) {
    song[year].musician = move(musician_temp);
    song[year].musName = move(musName_temp);
    song[year].nameOfPerf = move(perform);
    song[year].yearSong = year;
}

void getSong(size_t year) {
        if (year < song.size() && song[year].yearSong == year) {
            cout << "Музыкант\\группа: " << song[year].musician + " " << "; песня - " << song[year].musName + " "
                 << "; вид исполнения - " << song[year].nameOfPerf << " " << "; дата релиза - " << song[year].yearSong;
        }
}

int main() {

    system("chcp 65001");

    ifstream f1;
    f1.open("f1.txt");
    if (!f1.is_open()) {
        cout << "Файл не смог открыться" << endl;
    } else {
        cout << "Файл был открыт" << endl;
        string str;
        while (getline(f1, str)) {
            getline(f1, str);
            string musicin, nameMuz, perform;
            size_t year;
            istringstream isstr(str);
            isstr >> musicin >> nameMuz >> perform >> year;
            addSong(musicin, nameMuz, perform, year);
        }
    }

    f1.close();


    ofstream f2;
    f2.open("f2.txt");
    if (!f2.is_open()) {
        cout << "Файл не смог открыться" << endl;
    } else {
        cout << "Файл был открыт" << endl;
        cout << "Введите данные:" << endl;
        string data;
        cin >> data;
        f2 << data;
    }
    f2.close();


    cout << endl << "Введите дату релиза:" << endl;
    size_t year;
    cin >> year;
    getSong(year);

}



#include <iostream>
#include <vector>
#include <iterator>

using namespace std;

class Set {
private:
    vector <int> my_list;
public:

    Set() = default;

    ~Set() = default;

    void add(int a) {
        (my_list).push_back(a);

	for (int i = 0; i < my_list.size(); i++) {
            for (int j = i + 1; j < my_list.size(); j++) {
                if (my_list.at(i) > my_list.at(j)) {
                    auto temp = my_list.at(i);
                    my_list.at(i) = my_list.at(j);
                    my_list.at(j) = temp;
                }
            }
        }
    }

    void removeElem(int index) {
        my_list.erase(my_list.begin() + index);
    }

    void print() {
        vector <int> :: iterator it;

        for (it = my_list.begin(); it < my_list.end(); it++) {
            cout << *it << " ";
        }
    }

    friend Set operator+(Set &s1, Set &s2);
};

Set operator+(Set &s1, Set &s2) {
    Set temp;
    Set temp_new;
    copy(s1.my_list.begin(), s1.my_list.end(), back_inserter(temp_new.my_list));
    copy(s2.my_list.begin(), s2.my_list.end(), back_inserter(temp_new.my_list));
    copy(temp_new.my_list.begin(), temp_new.my_list.end(), back_inserter(temp.my_list));

    for (int i = 0; i < temp_new.my_list.size(); i++) {
        for (int j = i + 1; j < temp_new.my_list.size(); j++) {
            if (temp_new.my_list.at(i) == temp_new.my_list.at(j)) {
                temp_new.removeElem(j);
            }
        }
    }

    for (int i = 0; i < temp_new.my_list.size(); i++) {
        for (int j = i + 1; j < temp_new.my_list.size(); j++) {
            if (temp_new.my_list.at(i) > temp_new.my_list.at(j)) {
                auto temp0 = temp_new.my_list.at(i);
                temp_new.my_list.at(i) = temp_new.my_list.at(j);
                temp_new.my_list.at(j) = temp0;
            }
        }
    }

    return temp_new;
}

int main() {
    system("chcp 65001");

    Set a;
    a.add(9);
    a.add(8);
    a.add(19);

    Set b;
    b.add(4);
    b.add(7);
    b.add(10);


    cout << "Множество A: ";
    a.print();
    cout << "\n";

    cout << "Множество B: ";
    b.print();
    cout << "\n";

    Set c = a + b;
    cout << "Множество C: ";
    c.print();

    cout << "\n";


}#include <iostream>
#include <vector>
#include <iterator>

using namespace std;


/*
Задача на основе 6 задачи 6 варианта. В качестве иного типа данных использовались string и char
 */
template <class T>
class Set {
private:
    vector <T> my_list;
public:

    Set() = default;

    ~Set() = default;

    void add(T a) {
        (my_list).push_back(a);

	for (int i = 0; i < my_list.size(); i++) {
            for (int j = i + 1; j < my_list.size(); j++) {
                if (my_list.at(i) > my_list.at(j)) {
                    auto temp = my_list.at(i);
                    my_list.at(i) = my_list.at(j);
                    my_list.at(j) = temp;
                }
            }
        }
    }

    void removeElem(int index) {
        my_list.erase(my_list.begin() + index);
    }

    void print() {
        for (int i = 0; i < my_list.size(); i++) {
            cout << my_list.at(i) << " ";
        }
    }

    friend Set<T> operator+(Set<T> &s1, Set<T> &s2);
};

Set<string> operator+(Set<string> &s1, Set<string> &s2) {
    Set<string> temp;
    Set<string> temp_new;
    copy(s1.my_list.begin(), s1.my_list.end(), back_inserter(temp_new.my_list));
    copy(s2.my_list.begin(), s2.my_list.end(), back_inserter(temp_new.my_list));
    copy(temp_new.my_list.begin(), temp_new.my_list.end(), back_inserter(temp.my_list));

    for (int i = 0; i < temp.my_list.size(); i++) {
        for (int j = i + 1; j < temp.my_list.size(); j++) {
            if (temp.my_list.at(i) == temp.my_list.at(j)) {
                temp.removeElem(j);
            }
        }
    }

    for (int i = 0; i < temp.my_list.size(); i++) {
       for (int j = i + 1; j < temp.my_list.size(); j++) {
            if (temp.my_list.at(i) > temp.my_list.at(j)) {
                auto temp0 = temp.my_list.at(i);
                temp.my_list.at(i) = temp.my_list.at(j);
                temp.my_list.at(j) = temp0;
            }
        }
    }


    return temp;
}

Set<char> operator+(Set<char> &s1, Set<char> &s2) {
    Set<char> temp1;
    Set<char> temp_new;
    copy(s1.my_list.begin(), s1.my_list.end(), back_inserter(temp_new.my_list));
    copy(s2.my_list.begin(), s2.my_list.end(), back_inserter(temp_new.my_list));
    copy(temp_new.my_list.begin(), temp_new.my_list.end(), back_inserter(temp1.my_list));

    for (int i = 0; i < temp1.my_list.size(); i++) {
        for (int j = i + 1; j < temp1.my_list.size(); j++) {
            if (temp1.my_list.at(i) == temp1.my_list.at(j)) {
                temp1.removeElem(j);
            }
        }
    }

    for (int i = 0; i < temp1.my_list.size(); i++) {
       for (int j = i + 1; j < temp1.my_list.size(); j++) {
            if (temp1.my_list.at(i) > temp1.my_list.at(j)) {
                auto temp0 = temp1.my_list.at(i);
                temp1.my_list.at(i) = temp1.my_list.at(j);
                temp1.my_list.at(j) = temp0;
            }
        }
    }


    return temp1;
}

int main() {
    system("chcp 65001");

    Set<string> a;
    a.add("Лиса");
    a.add("Собака");
    a.add("Волк");

    Set<string> b;
    b.add("Пчела");
    b.add("Оса");
    b.add("Шмель");


    cout << "Множество животных: ";
    a.print();
    cout << "\n";

    cout << "Множество насекомых: ";
    b.print();
    cout << "\n";

    Set<string> c = a + b;
    cout << "Множество животных и насекомых: ";
    c.print();

    cout << "\n\n";

    Set<char> d;
    d.add('a');
    d.add('e');
    d.add('o');

    Set<char> f;
    f.add('b');
    f.add('c');
    f.add('d');

    Set<char> h;
    h = d + f;

    cout << "Множество гласных букв: ";
    d.print();
    cout << "\n";

    cout << "Множество согласных букв: ";
    f.print();
    cout << "\n";

    cout << "Множество согласных и гласных букв: ";
    h.print();
    cout << "\n";



}